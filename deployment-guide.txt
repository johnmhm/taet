# Deployment Guide: 3D Data Visualization Environment

This guide provides step-by-step instructions for deploying this 3D data visualization application on a standard Debian server.

## Prerequisites

- A Debian-based server (Debian 10+/Ubuntu 20.04+)
- Root or sudo access
- Domain name (optional, but recommended)

## Step 1: Update System Packages

```bash
sudo apt update
sudo apt upgrade -y
```

## Step 2: Install Required Dependencies

```bash
# Install Node.js (v20.x)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt install -y nodejs

# Install build essentials
sudo apt install -y build-essential git

# Verify installations
node -v
npm -v
```

## Step 3: Create a User for the Application (Optional but Recommended)

```bash
sudo useradd -m -s /bin/bash appuser
sudo passwd appuser
# Set a strong password when prompted

# Give the user sudo privileges if needed
sudo usermod -aG sudo appuser

# Switch to the new user
su - appuser
```

## Step 4: Clone the Repository

```bash
mkdir -p /home/appuser/apps
cd /home/appuser/apps
git clone <your-repository-url> data-visualization
cd data-visualization
```

## Step 5: Install Application Dependencies

```bash
npm install
```

## Step 6: Build the Application

```bash
npm run build
```

## Step 7: Set Up a Process Manager (PM2)

PM2 keeps your application running even after you close the terminal and can restart it if it crashes.

```bash
# Install PM2 globally
sudo npm install -g pm2

# Start the application with PM2
pm2 start server/index.js --name data-visualization

# Set PM2 to start on system boot
pm2 startup
# Follow the instructions given by the above command
pm2 save
```

## Step 8: Set Up Nginx as a Reverse Proxy

Install and configure Nginx to forward requests to your Node.js application:

```bash
sudo apt install -y nginx

# Configure Nginx
sudo nano /etc/nginx/sites-available/data-visualization
```

Add the following configuration (replace `your-domain.com` with your actual domain, or use your server's IP address):

```nginx
server {
    listen 80;
    server_name your-domain.com;

    location / {
        proxy_pass http://localhost:3000;  # Use the port your app runs on
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }
}
```

Enable the site and restart Nginx:

```bash
sudo ln -s /etc/nginx/sites-available/data-visualization /etc/nginx/sites-enabled/
sudo nginx -t  # Test the configuration
sudo systemctl restart nginx
```

## Step 9: Set Up SSL with Let's Encrypt (Optional but Recommended)

```bash
sudo apt install -y certbot python3-certbot-nginx
sudo certbot --nginx -d your-domain.com
# Follow the prompts to complete the process
```

## Step 10: Configure Firewall (Optional but Recommended)

```bash
sudo apt install -y ufw
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow https
sudo ufw enable
```

## Step 11: Monitoring and Logs

```bash
# View application logs
pm2 logs data-visualization

# Monitor application
pm2 monit

# Check Nginx logs
sudo tail -f /var/log/nginx/access.log
sudo tail -f /var/log/nginx/error.log
```

## Step 12: Setting Up Environment Variables (If Needed)

Create a `.env` file in your application directory:

```bash
nano .env
```

Add any required environment variables:

```
NODE_ENV=production
# Add other environment variables as needed
```

Restart your application to apply the changes:

```bash
pm2 restart data-visualization
```

## Troubleshooting

1. **Application not starting**: Check your logs with `pm2 logs data-visualization`
2. **Cannot connect to the application**: Verify that Nginx is running with `sudo systemctl status nginx`
3. **SSL certificate issues**: Run `sudo certbot certificates` to check the status of your certificates

## Maintenance

- Update your application: 
  ```bash
  cd /home/appuser/apps/data-visualization
  git pull
  npm install
  npm run build
  pm2 restart data-visualization
  ```

- Update system packages regularly: 
  ```bash
  sudo apt update
  sudo apt upgrade -y
  ```

- Renew Let's Encrypt certificates (typically automatic, but can be forced): 
  ```bash
  sudo certbot renew --force-renewal
  ```